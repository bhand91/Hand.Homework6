@page "{searchString?}"
@model MovieReviews.Pages.Movies.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<form asp-page = "./Index" method = "get">
    <div class = "form-actions no-color">
        <p>
            <select asp-for="MovieGenre" asp-items="Model.Genres">
                <option value="">All</option>
            </select>
            Title: <input type="text" asp-for="SearchString" value = "@Model.CurrentFilter" />
            <input type="submit" value="Filter" class="btn btn-default" />
            <a asp-page="./Index"> Back to full list</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page ="./Index" asp-route-sortOrder="@Model.NameSort" 
                    asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Movie[0].Title)
                </a>
            </th>
            <th>
                <a asp-page ="./Index" asp-route-sortOrder="@Model.DateSort"
                    asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Movie[0].ReleaseDate)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Rating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Reviews)
            </th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Movie) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>

            <td>
                @{
                    // For each movie, calculate the Average review score and display it
                    // Or display N/A. @:text will display text in HTML. or you can use a <span> tag
                    if(item.Reviews.Count > 0) {
                        double avg = item.Reviews.Average(r => r.Score);
                        @Html.DisplayFor(modelItem => avg)
                    }
                    else
                    {
                        @:N/A
                    }

                }
            </td>          
            <td>
                <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Movie.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Movie.HasNextPage ? "disabled" : "";
}
<a asp-page=".\Index"
    asp-route-sortOrder = "@Model.CurrentSort"
    asp-route-pageIndex = "@(Model.Movie.PageIndex-1)"
    asp-route-currentFilter = "@Model.CurrentFilter"
    class = "btn btn-defult @prevDisabled">
        Previous
</a>
<a asp-page="./Index"
    asp-route-sortOrder="@Model.CurrentSort"
    asp-route-pageIndex="@(Model.Movie.PageIndex + 1)"
    asp-route-currentFilter="@Model.CurrentFilter"
    class="btn btn-default @nextDisabled">
        Next
</a>
